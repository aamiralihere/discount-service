package com.retailstore.discountservice.service;import com.retailstore.discountservice.constant.DiscountPercentage;import com.retailstore.discountservice.constant.ItemType;import com.retailstore.discountservice.constant.UserType;import com.retailstore.discountservice.model.*;import com.retailstore.discountservice.model.impl.BillAmountBasedDiscount;import com.retailstore.discountservice.model.impl.PercentageBasedDiscount;import com.retailstore.discountservice.request.BillRequest;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.time.LocalDateTime;import java.util.List;import java.util.Objects;@Service@Slf4jpublic class DiscountService {    private CurrencyService currencyService;    @Autowired    public DiscountService(CurrencyService currencyService) {        this.currencyService = currencyService;    }    public Double calculateDiscount(BillRequest bill) {        User user = bill.getUser();        List<Item> items = bill.getItems();        Double totalAmount = calculateTotalAmount(bill);        Double billAmountBasedDiscount = calculateBillAmountBasedDiscount(totalAmount);        log.info("billAmountBasedDiscount = " + billAmountBasedDiscount);        Double percentageBasedDiscount = calculatePercentageBasedDiscount(user, items);        log.info("percentageBasedDiscount = " + percentageBasedDiscount);        Double netAmount = totalAmount - percentageBasedDiscount - billAmountBasedDiscount;        log.info("NetAmount in " + bill.getOriginalCurrency() + " = " + netAmount);        Double conversionRate = currencyService.getExchangeRate(bill.getOriginalCurrency().toUpperCase(), bill.getTargetCurrency().toUpperCase());        log.info("conversionRate = " + conversionRate);        Double convertedNetAmount = netAmount * conversionRate;        log.info("NetAmount in " + bill.getTargetCurrency() + " = " + convertedNetAmount);        return convertedNetAmount;    }    private Double calculateBillAmountBasedDiscount(Double amount) {        return new BillAmountBasedDiscount().applyDiscount(amount);    }    private Double calculateTotalAmount(BillRequest bill) {        return bill.getItems().stream().mapToDouble(Item::getItemPrice).sum();    }    private Double calculatePercentageBasedDiscount(User user, List<Item> items) {        Double discountedAmount = 0.0;        BaseDiscount percentageBasedDiscount = getPercentageBasedDiscount(user);        if(Objects.nonNull(percentageBasedDiscount)) {            for (Item item : items) {                if (!item.getItemType().equals(ItemType.GROCERY)) {                    discountedAmount += percentageBasedDiscount.applyDiscount(item.getItemPrice());                }            }        }        return discountedAmount;    }    private BaseDiscount getPercentageBasedDiscount(User user) {        BaseDiscount percentageBasedDiscount = null;        if(user.getUserTypes().contains(UserType.EMPLOYEE)) {            percentageBasedDiscount = new PercentageBasedDiscount(DiscountPercentage.EMPLOYEE_PERCENTAGE);        } else if(user.getUserTypes().contains(UserType.AFFILIATE)) {            percentageBasedDiscount = new PercentageBasedDiscount(DiscountPercentage.AFFILIATE_PERCENTAGE);        } else if (user.getUserTypes().contains(UserType.CUSTOMER) && isOverTwoYearsOldCustomer(user)) {            percentageBasedDiscount = new PercentageBasedDiscount(DiscountPercentage.CUSTOMER_PERCENTAGE);        }        return percentageBasedDiscount;    }    private Boolean isOverTwoYearsOldCustomer(User user) {        return user.getCreatedDate().isBefore(LocalDateTime.now().minusYears(2));    }}